name: Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch:  # Allow manual deployment

# Only allow one deployment at a time
concurrency:
  group: deploy
  cancel-in-progress: false

jobs:
  pre-deployment-checks:
    name: Pre-deployment Checks
    runs-on: ubuntu-latest
    
    outputs:
      should-deploy: ${{ steps.check.outputs.should-deploy }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Check deployment conditions
        id: check
        run: |
          # Check if this is a production-ready commit
          if git log -1 --pretty=%B | grep -q "\[skip deploy\]"; then
            echo "Deployment skipped due to [skip deploy] in commit message"
            echo "should-deploy=false" >> $GITHUB_OUTPUT
          else
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          fi

  run-ci-checks:
    name: Run CI Checks
    uses: ./.github/workflows/ci.yml
    needs: pre-deployment-checks
    if: needs.pre-deployment-checks.outputs.should-deploy == 'true'
    secrets: inherit

  build-production:
    name: Build Production
    runs-on: ubuntu-latest
    needs: [run-ci-checks]
    if: needs.pre-deployment-checks.outputs.should-deploy == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application for production
        run: npm run build
        env:
          NODE_ENV: production
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.PROD_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.PROD_SUPABASE_ANON_KEY }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: production-build
          path: .next/
          retention-days: 7

  deploy-to-vercel:
    name: Deploy to Vercel
    runs-on: ubuntu-latest
    needs: [build-production]
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: production-build
          path: .next/
        
      - name: Deploy to Vercel
        id: deploy
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod --confirm'
          scope: ${{ secrets.VERCEL_ORG_ID }}
          
      - name: Set deployment URL output
        run: echo "DEPLOYMENT_URL=${{ steps.deploy.outputs.preview-url }}" >> $GITHUB_ENV

  post-deployment-tests:
    name: Post-deployment Tests
    runs-on: ubuntu-latest
    needs: [deploy-to-vercel]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
        
      - name: Wait for deployment
        run: |
          echo "Waiting for deployment to be ready..."
          sleep 60
          
      - name: Run smoke tests against production
        run: npm run test:e2e -- --grep "smoke"
        env:
          PLAYWRIGHT_BASE_URL: ${{ secrets.PRODUCTION_URL }}
          
      - name: Run basic health checks
        run: |
          # Health check endpoint
          response=$(curl -s -o /dev/null -w "%{http_code}" ${{ secrets.PRODUCTION_URL }}/api/health || echo "000")
          if [ "$response" != "200" ]; then
            echo "Health check failed with response code: $response"
            exit 1
          fi
          echo "Health check passed"

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [post-deployment-tests]
    if: success()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Generate release notes
        id: release_notes
        run: |
          # Get the last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [ -z "$LAST_TAG" ]; then
            # If no previous tag, get all commits
            COMMITS=$(git log --oneline --since="1 week ago")
          else
            # Get commits since last tag
            COMMITS=$(git log --oneline $LAST_TAG..HEAD)
          fi
          
          # Generate release notes
          echo "## Changes" > release_notes.md
          echo "$COMMITS" | sed 's/^/- /' >> release_notes.md
          
          # Create a version tag
          VERSION="v$(date +%Y.%m.%d)-$(git rev-parse --short HEAD)"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          
      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}
          release_name: Production Deployment ${{ env.VERSION }}
          body_path: release_notes.md
          draft: false
          prerelease: false

  notify-deployment:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [create-release]
    if: always()
    
    steps:
      - name: Notify Slack
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          text: |
            Deployment Status: ${{ job.status }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
            Branch: ${{ github.ref }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
          
      - name: Notify Sentry of deployment
        if: success()
        run: |
          curl -X POST \
            "https://sentry.io/api/0/organizations/${{ secrets.SENTRY_ORG }}/releases/" \
            -H "Authorization: Bearer ${{ secrets.SENTRY_AUTH_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{
              "version": "${{ github.sha }}",
              "projects": ["${{ secrets.SENTRY_PROJECT }}"],
              "ref": "${{ github.ref }}"
            }'